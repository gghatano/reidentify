install.packages("fuzzyjoin")
install.packages("fuzzyjoin")
library(fuzzyjoin)
data("misspellings")
misspellings %>% head
library(tidyverse)
library(tidyverse)
library(fuzzyjoin)
data("misspellings")
misspellings %>% head
install.packages("qdapDictionaries")
install.packages("qdapDictionaries")
library(qdapDictionaries)
library(qdapDictionaries)
words = tbl_df(DICTIONARY)
words %>% head
sub_misspellings <- misspellings %>%
sample_n(1000)
set.seed(2016)
sub_misspellings <- misspellings %>%
sample_n(1000)
sub_misspellings %>% head
set.seed(2016)
sub_misspellings <- misspellings %>%
sample_n(1000)
sub_misspellings %>% head
joined <- sub_misspellings %>%
stringdist_inner_join(words, by = c(misspelling = "word"), max_dist = 1)::
joined %>% head
joined <- sub_misspellings %>%
stringdist_inner_join(words, by = c(misspelling = "word"), max_dist = 1)
joined <- sub_misspellings %>%
stringdist_inner_join(words, by = c(misspelling = "word"), max_dist = 1)
joined %>% head
joined %>% head(100)
sepal_lengths = data_frame(Sepal.Length = c(5:7), Type = 1:3)
iris %>%
difference_inner_join(sepal_lengths, max_dist = .5)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
RAW_ID = RAW_ID,
RAW_NUM = RAW_NUM,
RAW_BIN = RAW_BIN,
RAW_CHAR = RAW_CHAR)
source('~/reidentify/R/hello.R', echo=TRUE)
source('~/reidentify/R/hello.R', echo=TRUE)
library(dplyr)
row_num = 100
ROW_NUMBER = 1:row_num
RAW_ID = ROW_NUMBER + 10000
ANON_ID = stri_rand_stringi(n = row_num, length = 10)
RAW_NUM = runif(n = row_num)
ANON_NUM = RAW_NUM + runif(n = row_num) * 0.01
RAW_BIN = sample(x = c(0,1,100), prob = c(20,20,1), size = row_num, replace = TRUE)
ANON_BIN = RAW_BIN
RAW_CHAR = stri_rand_stringi(n = row_num, length = 2)
ANON_CHAR = stri_rand_stringi(n = row_num, length = 2)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
RAW_ID = RAW_ID,
RAW_NUM = RAW_NUM,
RAW_BIN = RAW_BIN,
RAW_CHAR = RAW_CHAR)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
ANON_ID = ANON_ID,
ANON_NUM = ANON_NUM,
ANON_BIN = ANON_BIN,
ANON_CHAR = ANON_CHAR)
ROW_NUMBER = 1:row_num
RAW_ID = ROW_NUMBER + 10000
ANON_ID = stri_rand_stringi(n = row_num, length = 10)
RAW_NUM = runif(n = row_num)
ANON_NUM = RAW_NUM + runif(n = row_num) * 0.01
RAW_BIN = sample(x = c(0,1,100), prob = c(20,20,1), size = row_num, replace = TRUE)
library(tidyverse)
source('~/reidentify/R/hello.R', echo=TRUE)
ANON_ID = stri_rand_string(n = row_num, length = 10)
library(stringi)
ANON_ID = stri_rand_strings(n = row_num, length = 10)
RAW_NUM = runif(n = row_num)
ANON_NUM = RAW_NUM + runif(n = row_num) * 0.01
RAW_BIN = sample(x = c(0,1,100), prob = c(20,20,1), size = row_num, replace = TRUE)
ANON_BIN = RAW_BIN
RAW_CHAR = stri_rand_stringi(n = row_num, length = 2)
ANON_CHAR = stri_rand_stringi(n = row_num, length = 2)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
RAW_ID = RAW_ID,
RAW_NUM = RAW_NUM,
RAW_BIN = RAW_BIN,
RAW_CHAR = RAW_CHAR)
RAW_CHAR = stri_rand_strings>n = row_num, length = 2)
ANON_CHAR = stri_rand_strings(n = row_num, length = 2)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
RAW_ID = RAW_ID,
RAW_NUM = RAW_NUM,
RAW_BIN = RAW_BIN,
RAW_CHAR = RAW_CHAR)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
ANON_ID = ANON_ID,
ANON_NUM = ANON_NUM,
ANON_BIN = ANON_BIN,
ANON_CHAR = ANON_CHAR)
RAW_CHAR = stri_rand_strings(n = row_num, length = 2)
ANON_CHAR = stri_rand_strings(n = row_num, length = 2)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
RAW_ID = RAW_ID,
RAW_NUM = RAW_NUM,
RAW_BIN = RAW_BIN,
RAW_CHAR = RAW_CHAR)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
ANON_ID = ANON_ID,
ANON_NUM = ANON_NUM,
ANON_BIN = ANON_BIN,
ANON_CHAR = ANON_CHAR)
dat_raw
dat_anon
dat_anon = data_frame(ROW_NUMBER = ROW_NUMBER,
ANON_ID = ANON_ID,
ANON_NUM = ANON_NUM,
ANON_BIN = ANON_BIN,
ANON_CHAR = ANON_CHAR)
dat_raw
dat_anon
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
RAW_ID = RAW_ID,
RAW_NUM = RAW_NUM,
RAW_BIN = RAW_BIN,
RAW_CHAR = RAW_CHAR)
dat_anon = data_frame(ROW_NUMBER = ROW_NUMBER,
ANON_ID = ANON_ID,
ANON_NUM = ANON_NUM,
ANON_BIN = ANON_BIN,
ANON_CHAR = ANON_CHAR)
dat_raw
dat_anon
ANON_BIN = RAW_BIN %>% if_else(. > 100, 1, .)
ANON_BIN
ANON_BIN = RAW_BIN %>% if_else(. >= 100, 1, .)
ANON_BIN
ANON_BIN = RAW_BIN %>% if_else(. >= 100, 1, .)
RAW_CHAR = stri_rand_strings(n = row_num, length = 2)
ANON_CHAR = stri_rand_strings(n = row_num, length = 2)
dat_raw = data_frame(ROW_NUMBER = ROW_NUMBER,
RAW_ID = RAW_ID,
RAW_NUM = RAW_NUM,
RAW_BIN = RAW_BIN,
RAW_CHAR = RAW_CHAR)
dat_anon = data_frame(ROW_NUMBER = ROW_NUMBER,
ANON_ID = ANON_ID,
ANON_NUM = ANON_NUM,
ANON_BIN = ANON_BIN,
ANON_CHAR = ANON_CHAR)
dat_raw
dat_anon
return 0
0 %>% return
source('~/reidentify/R/hello.R', echo=TRUE)
create_dummy_data(100)
getwd()
library(reticulate)
library(reidentify)
library(dplyr)
dat = create_dummy_master_data(1000)
library(reticulate)
library(reidentify)
library(stringi)
library(tidyverse)
dat = create_dummy_master_data(1000)
dat %>% head
py_discover_config()
reticulate::use_python(
python = "/usr/bin/python3"
)
import(module="sys")$version
reply_python()
repl_python()
repl_python()
pdp = import("pandas_profiling")
usethis::use_mit_license("@gg_hatano")
usethis::use_roxygen_md()
install.packages("roxygen2")
usethis::use_roxygen_md()
install.packages("roxygen2md")
usethis::use_roxygen_md()
devtools::document()
devtools::document()
devtools::load_all()
usethis::use_roxygen_md()
roxygen2md::roxygen2md("/home/vagrant/works/reidentify")
devtools::document()
devtools::document()
devtools::document()
library(reidentify)
usethis::use_package_doc()
devtools::check()
devtools::check()
library(reidentify)
install_github("gghatano/reidentify")
devtools::install_github("gghatano/reidentify")
library(reidentify)
create_dummy_master_data(100)
pack = "reidentify"
path = find.packages(pack)
path = find.package(pack)
library(reidentify)
